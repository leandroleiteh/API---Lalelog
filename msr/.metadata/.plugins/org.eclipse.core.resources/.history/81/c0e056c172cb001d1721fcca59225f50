package com.learning.lalelog.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.learning.lalelog.domain.model.Cliente;
import com.learning.lalelog.domain.repository.ClienteRepository;

import lombok.AllArgsConstructor;

@AllArgsConstructor
@RestController
@RequestMapping("/clientes")
public class ClienteController {

	private ClienteRepository clienteRepository;

//---------------------------LISTANDO TODOS OS CLIENTES (GET)----------------------------------------------------------

	@GetMapping
	public List<Cliente> listar() {
		return clienteRepository.findAll();
	}

//---------------------------BUSCANDO POR ID (GET)-------------------------------------------------------------

	@GetMapping("/{clienteId}")
	public ResponseEntity<Cliente> buscar(@PathVariable Long clienteId) {
		return clienteRepository.findById(clienteId)
				// .map(cliente -> ResponseEntity.ok(cliente)) #UTILIZANDO LAMBDA EXPRESSION
				.map(ResponseEntity::ok) // #UTILIZANDO MÃ‰TODO REFERENCE
				.orElse(ResponseEntity.notFound().build());

	}
//---------------------------CADASTRANDO (POST)-------------------------------------------------------------------------

	@PostMapping
	@ResponseStatus(HttpStatus.CREATED)
	public Cliente adicionar(@RequestBody Cliente cliente) {
		return clienteRepository.save(cliente);
	}
		
//---------------------------ATUALIZAR (PUT)-------------------------------------------------------------------------		
	
	@PutMapping("{/clienteId}")
	public ResponseEntity<Cliente> atualizar(@PathVariable Long clienteId, Cliente cliente){
		if(!clienteRepository.existsById(clienteId)) {
			return ResponseEntity.notFound().build();
		}
		cliente.setId(clienteId);
		cliente = clienteRepository.save(cliente);
		return ResponseEntity.ok(cliente);
	}
	
	
	
	
}

