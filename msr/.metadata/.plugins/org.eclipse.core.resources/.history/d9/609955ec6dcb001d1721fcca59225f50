package com.learning.lalelog.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import com.learning.lalelog.domain.model.Cliente;
import com.learning.lalelog.domain.repository.ClienteRepository;

import lombok.AllArgsConstructor;

@AllArgsConstructor
@RestController
public class ClienteController {

	private ClienteRepository clienteRepository;
	
	//---------------------------LISTANDO TODOS OS CLIENTES SALVOS NO DATABASE-----------------------------------------------------------
	
	@GetMapping("/clientes")
	public List<Cliente> listar() {
		return clienteRepository.findAll();
	}

	//---------------------------------------BUSCANDO POR ID--------------------------------------------------------------
	
	@GetMapping("clientes/{clienteId}")
	public ResponseEntity<Cliente> buscar(@PathVariable Long clienteId) {
		return clienteRepository.findById(clienteId)
				
				//.map(cliente -> ResponseEntity.ok(cliente)) #UTILIZANDO LAMBDA/ E INTERFACE FUNCIONAL
				.map(ResponseEntity::ok)   //#UTILIZANDO MÉTODO REFERENCE
				.orElse(ResponseEntity.notFound().build());
		
		/*Optional<Cliente> cliente = clienteRepository.findById(clienteId);   #MESMO MÉTODO PORÉM COM CÓDIGO MAIOR
		
		if(cliente.isPresent()) {
			return ResponseEntity.ok(cliente.get());
		}
		
		return ResponseEntity.notFound().build();*/
		
		//-----------------------------------------------------------------------------------------------------------
		
	}
}
